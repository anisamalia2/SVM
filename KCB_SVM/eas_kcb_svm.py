# -*- coding: utf-8 -*-
"""EAS KCB_SVM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1278vBTu99LaxZiOaNSpY7EOjPOLpO76O
"""

#Import library
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.utils import shuffle
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, precision_score, recall_score, f1_score, roc_curve, auc
import matplotlib.pyplot as plt

#Dataset
df = pd.read_excel('/content/dataset mahasiswa.xlsx', header=1)
df.head()

#Mengelompokkan data dari numerik ke kategorik

#Transformasi IPK
def kategorikan_ipk(IPK):
    if IPK >= 3.50:
        return "PUJIAN"
    elif IPK >= 3.00:
        return "SANGAT MEMUASKAN"
    elif IPK >= 2.75:
        return "MEMUASKAN"
    else:
        return None

# Transformasi IPS
def kategorikan_ips(IPS):
    if IPS >= 3.50:
        return "TINGGI"
    elif IPS >= 2.75:
        return "CUKUP"
    else:
        return "RENDAH"

# Transformasi SKS
def kategorikan_sks(SKS):
    return "TERCAPAI" if SKS >= 144 else "TIDAK TERCAPAI"

# Transformasi Umur
def kategorikan_umur(Umur):
    return "LEBIH" if Umur > 23 else "SESUAI"

# Apply ke dataframe
df['IPK_Kat'] = df['IPK'].apply(kategorikan_ipk)
df['IPS1_Kat'] = df['IPS1'].apply(kategorikan_ips)
df['IPS2_Kat'] = df['IPS2'].apply(kategorikan_ips)
df['IPS3_Kat'] = df['IPS3'].apply(kategorikan_ips)
df['SKS_Kat'] = df['SKS'].apply(kategorikan_sks)
df['Umur_Kat'] = df['Umur'].apply(kategorikan_umur)

# 3. Tampilkan hasil
print(df[['IPK', 'IPK_Kat', 'IPS1', 'IPS1_Kat', 'SKS', 'SKS_Kat', 'Umur', 'Umur_Kat']].head())

#Encoding Kolom Kategorikal ke Numerik
le = LabelEncoder()
df['JENIS_KELAMIN_ENC'] = le.fit_transform(df['JK'])
df['JURUSAN_ENC'] = le.fit_transform(df['Jurusan'])

print(df.head())

#Menambahkan kolom 'Status' sebagai label target: 1 jika lulus tepat waktu (SKS >= 144)
df['Status'] = df['SKS'].apply(lambda x: 1 if x >= 144 else 0)

# Fitur input model
fitur = ['Umur', 'JENIS_KELAMIN_ENC', 'IPK', 'IPS1', 'IPS2', 'IPS3', 'IPS4', 'JURUSAN_ENC']
X = df[fitur]
y = df['Status']

## Menghapus data yang memiliki nilai kosong (NaN)
X = X.dropna()
y = y.loc[X.index]

#Standarisasi fitur agar memiliki skala yang sama
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
print("Jumlah data setelah scaling:", X_scaled.shape)

#Pembagian Data Secara Manual Sesuai Jurnal (90% Train, 10% Test)

# Acak dulu data
X, y = shuffle(X, y, random_state=42)

# Total data
total_data = len(X)

# Jumlah data sesuai jurnal
test_size = 218   # untuk kelompok 1
train_size = 1963

# Split manual
X_train = X.iloc[:train_size]
X_test = X.iloc[train_size:train_size+test_size]
y_train = y.iloc[:train_size]
y_test = y.iloc[train_size:train_size+test_size]

#Training model SVM
model = SVC(kernel='linear', C=1, probability=True)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

print(f"Jumlah data training: {len(X_train)}")
print(f"Jumlah data testing: {len(X_test)}")

#Fungsi Evaluasi Model SVM (Untuk Perbandingan 90%-80%-70%)
def svm_model_evaluation(X, y, test_size, group_name):
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=test_size, random_state=42, stratify=y)

    model = SVC(kernel='linear', C=1, probability=True, class_weight='balanced')
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    # Evaluasi
    acc = accuracy_score(y_test, y_pred)
    prec = precision_score(y_test, y_pred, zero_division=0)
    rec = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred, zero_division=0)
    cm = confusion_matrix(y_test, y_pred)

    print(f"\n=== {group_name} ===")
    print(f"Akurasi: {acc:.4f}")
    print(f"Precision: {prec:.4f}")
    print(f"Recall: {rec:.4f}")
    print(f"F1 Score: {f1:.4f}")
    print("Confusion Matrix:")
    print(cm)
    print("Classification Report:")
    print(classification_report(y_test, y_pred))

    # ROC Curve
    y_prob = model.predict_proba(X_test)[:, 1]
    fpr, tpr, thresholds = roc_curve(y_test, y_prob)
    roc_auc = auc(fpr, tpr)

    plt.figure()
    plt.plot(fpr, tpr, label=f'ROC Curve (area = {roc_auc:.2f})')
    plt.plot([0, 1], [0, 1], 'k--')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title(f'ROC Curve - {group_name}')
    plt.legend(loc='lower right')
    plt.grid(True)
    plt.show()

svm_model_evaluation(X_scaled, y, test_size=0.10, group_name="Kelompok 1 (90% Training)")
svm_model_evaluation(X_scaled, y, test_size=0.20, group_name="Kelompok 2 (80% Training)")
svm_model_evaluation(X_scaled, y, test_size=0.30, group_name="Kelompok 3 (70% Training)")

# Skenario uji coba SVM

hasil_skenario = []

def svm_skenario(X, y, test_size, kernel, C, skenario_nama):
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=test_size, random_state=42, stratify=y)

    model = SVC(kernel=kernel, C=C, probability=True, class_weight='balanced')
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    acc = accuracy_score(y_test, y_pred)
    prec = precision_score(y_test, y_pred, zero_division=0)
    rec = recall_score(y_test, y_pred, zero_division=0)
    f1 = f1_score(y_test, y_pred, zero_division=0)
    cm = confusion_matrix(y_test, y_pred)


    print(f"\n=== {skenario_nama} ===")
    print(f"Kernel: {kernel}, C: {C}")
    print(f"Akurasi : {acc:.4f}")
    print(f"Precision: {prec:.4f}")
    print(f"Recall   : {rec:.4f}")
    print(f"F1 Score : {f1:.4f}")
    print("Confusion Matrix:")
    print(cm)

    # ROC Curve
    y_prob = model.predict_proba(X_test)[:, 1]
    fpr, tpr, _ = roc_curve(y_test, y_prob)
    roc_auc = auc(fpr, tpr)

    plt.figure()
    plt.plot(fpr, tpr, label=f'ROC (area = {roc_auc:.2f})')
    plt.plot([0, 1], [0, 1], 'k--')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title(f'ROC Curve - {skenario_nama}')
    plt.legend(loc='lower right')
    plt.grid(True)
    plt.show()

    # Simpan ke list
    hasil_skenario.append({
        "Skenario": skenario_nama,
        "Kernel": kernel,
        "C": C,
        "Akurasi": acc,
        "Precision": prec,
        "Recall": rec,
        "F1 Score": f1
    })



svm_skenario(X_scaled, y, test_size=0.2, kernel='linear', C=1, skenario_nama="Skenario 1: Linear, C=1")
svm_skenario(X_scaled, y, test_size=0.2, kernel='rbf', C=1, skenario_nama="Skenario 2: RBF, C=1")
svm_skenario(X_scaled, y, test_size=0.2, kernel='poly', C=0.5, skenario_nama="Skenario 3: Polynomial, C=0.5")


print("\n=== Rekapitulasi Hasil Evaluasi ===")
df_hasil = pd.DataFrame(hasil_skenario)
print(df_hasil)